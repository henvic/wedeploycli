#! /usr/bin/expect

spawn $env(SHELL)

#####################################################
Scenario: "Cannot `we new` without signing in"
#####################################################

logout $_tester(email)

while {1} {
  send "we new\r"
  expect {
    timeout { handle_timeout; break }
    "You need to log in before using \"we new\"."
  }
  expect {
    timeout { handle_timeout; break }
    "Open your browser and authenticate?"
  }
  send "n\r"
  expect {
    timeout { handle_timeout; break }
    "Login canceled."
  }
  break
}

#####################################################
Scenario: "Create a project and service"
#####################################################

login $_tester(email) $_tester(pw)

while {1} {
  send "we new\r"
  expect {
    timeout { handle_timeout; break }
    "Do you want to*create*a new project or install a new service?"
  }
  send "1\r"
  expect {
    timeout { handle_timeout; break }
    "Choose a project ID"
  }
  send "new1\r"
  expect {
    timeout { handle_timeout; break }
    -gl "Project*new1*created."
  }
  send "we new\r"
  expect {
    timeout { handle_timeout; break }
    "Do you want to*create*a new project or install a new service?"
  }
  send "2\r"
  expect {
    timeout { handle_timeout; break }
    "Please*select*a project from the list below."
  }
  expect {
    timeout { handle_timeout; break }
    "Type project ID or #"
  }
  send "new1\r"
  expect {
    timeout { handle_timeout; break }
    "Select a Service Type"
  }
  send "4\r"
  expect {
    timeout { handle_timeout; break }
    "Choose a Service ID"
  }
  send "hosting1\r"
  expect {
    timeout { handle_timeout; break }
    "Service*hosting1-new1.wedeploy.sh*created"
  }
  verify_service_exists new1 hosting1
  break
}

delete_project new1
