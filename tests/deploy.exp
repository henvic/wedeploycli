#! /usr/bin/expect

spawn $env(SHELL)

send "cd ../fixtures/projectA\r"
expect {
  timeout {
    handle_timeout
    error "Had problem changing to project directory"
   }
  "fixtures/projectA"
}

#####################################################
print_msg "SCENARIO: Cannot deploy without logging in"
#####################################################

logout $_tester(email)

while {1} {
  send "we deploy\r"
  expect {
    timeout { handle_timeout; break }
    "You need to log in before using \"we deploy\"."
  }
  expect {
    timeout { handle_timeout; break }
    "Open your browser and authenticate?"
  }
  send "n\r"
  expect {
    timeout { handle_timeout; break }
    "Login canceled."
  }
  break
}

#####################################################
print_msg "SCENARIO: Deploy to a new project"
#####################################################

login $_tester(email) $_tester(pw)

while {1} {
  send "we deploy\r"
  expect {
    timeout { handle_timeout; break }
    "Type a project ID"
  }
  send "deploy1\r"
  expect {
    timeout { handle_timeout; break }
    "Project does not exist."
  }
  expect {
    timeout { handle_timeout; break }
    "Do you want to create project \"deploy1\""
  }
  send "y\r"
  expect "Deploying services on project"
  set timeout 30
  expect {
    timeout { handle_timeout; break }
    "Deployment succeeded"
  }
  break
}

set timeout $::_default_timeout
verify_service_exists deploy1 ui
delete_project deploy1

#####################################################
print_msg "SCENARIO: Deploy to an existing project"
#####################################################

create_project deploy2

while {1} {
  send "we deploy\r"
  expect {
    timeout { handle_timeout; break }
    "Type a project ID or #"
  }
  send "deploy2\r"
  expect {
    timeout { handle_timeout; break }
    "Deploying services on project"
  }
  set timeout 30
  expect {
    timeout {
      handle_timeout; break }
    "Deployment succeeded"
  }
  break
}

set timeout $::_default_timeout
verify_service_exists deploy2 ui
delete_project deploy2

#####################################################
print_msg "SCENARIO: Deploy project with two services"
#####################################################

send "cd ../projectB\r"
expect {
  timeout {
    handle_timeout
    error "Had problem changing to project directory"
   }
  "fixtures/projectB"
}

create_project deploy3

set timeout 30

while {1} {
  send "we deploy -p deploy3\r"
  expect {
    timeout { handle_timeout; break }
    "Deploying services on project"
  }
  expect {
    timeout { handle_timeout; break }
    "Deployment succeeded in"
  }
  expect {
    timeout { handle_timeout; break }
    "Upload completed in"
  }
  expect {
    timeout { handle_timeout; break }
    "Deployment succeeded"
  }
  expect {
    timeout { handle_timeout; break }
    "Deployment succeeded"
  }
  break
}

set timeout $::_default_timeout
verify_service_exists deploy3 ui1
verify_service_exists deploy3 ui2
delete_project deploy3

#####################################################
print_msg "SCENARIO: Deploy project with bad wedeploy.json"
#####################################################

send "cd ../projectC\r"
expect {
  timeout {
    handle_timeout
    error "Had problem changing to project directory"
   }
  "fixtures/projectC"
}

create_project deploy4

while {1} {
  set timeout 30
  send "we deploy -p deploy4\r"
  expect {
    timeout { handle_timeout; break }
    "Deployment failed"
  }
  expect {
    timeout { handle_timeout; break }
    "Error building service \"md\""
  }
  set timeout $::_default_timeout
  expect {
    timeout { handle_timeout; break }
    "Open browser to check the logs?"
  }
  send "n\r"
  expect {
    timeout { handle_timeout; break }
    "fixtures/projectC"
  }
  send "we log -p deploy4\r"
  expect {
    timeout { handle_timeout; break }
    "Something went wrong, most likely caused by an incorrect Dockerfile."
  }
  break
}

delete_project deploy4
