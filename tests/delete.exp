#! /usr/bin/expect

spawn $env(SHELL)

#####################################################
print_msg "SCENARIO: Cannot delete without signing in"
#####################################################

logout $_tester(email)

while {1} {
  send "we delete\r"
  expect {
    timeout { handle_timeout; break }
    "You need to log in before using \"we delete\"."
  }
  expect {
    timeout { handle_timeout; break }
    "Open your browser and authenticate?"
  }
  send "n\r"
  expect {
    timeout { handle_timeout; break }
    "Login canceled."
  }
  break
}

#####################################################
print_msg "SCENARIO: Delete a project"
#####################################################

login $_tester(email) $_tester(pw)

create_project delete1

while {1} {
  send "we delete\r"
  expect {
    timeout { handle_timeout; break }
    "Please select a project or a service"
  }
  expect {
    timeout { handle_timeout; break }
    "Type a project/service ID or a service #"
  }
  send "delete1\r"
  expect {
    timeout { handle_timeout; break }
    -gl "Enter the project ID*delete1*to delete it permanently"
  }
  send "delete1\r"
  expect {
    timeout { handle_timeout; break }
    -gl "Deleting project*delete1"
  }
  send "we curl /projects/delete1\r"
  expect {
    timeout { handle_timeout; break }
    "Project does not exist."
  }
  break
}

#####################################################
print_msg "SCENARIO: Delete a service"
#####################################################

create_project delete2
create_service delete2 hosting1
create_service delete2 hosting2

while {1} {
  send "we delete\r"
  expect {
    timeout { handle_timeout; break }
    "Please select a project or a service"
  }
  expect {
    timeout { handle_timeout; break }
    "Type a project/service ID or a service #"
  }
  send "hosting1\r"
  expect {
    timeout { handle_timeout; break }
    -gl "Enter the service ID*hosting1*to delete it permanently"
  }
  send "hosting1\r"
  expect {
    timeout { handle_timeout; break }
    -gl "Deleting service*hosting1*on project*delete2"
  }
  send "we curl /projects/delete2/services/hosting1\r"
  expect {
    timeout { handle_timeout; break }
    "Service delete2/hosting1 does not exist."
  }
  break
}

verify_service_exists delete2 hosting2
delete_project delete2

#####################################################
print_msg "SCENARIO: Delete a project with -p flag"
#####################################################

create_project delete3
create_project delete4

while {1} {
  send "we delete -p delete4\r"
  expect {
    timeout { handle_timeout; break }
    -gl "Enter the project ID*delete4*to delete it permanently"
  }
  send "delete4\r"
  expect {
    timeout { handle_timeout; break }
    -gl "Deleting project*delete4"
  }
  send "we curl /projects/delete4\r"
  expect {
    timeout { handle_timeout; break }
    "Project does not exist."
  }
  send "we curl /projects/delete3\r"
  expect {
    timeout { handle_timeout; break }
    "\{\"createdAt\":"
  }
  break
}

delete_project delete3

#####################################################
print_msg "SCENARIO: Delete a service with -p and -s flags"
#####################################################

create_project delete5
create_service delete5 hosting1
create_service delete5 hosting2

while {1} {
  send "we delete -p delete5 -s hosting1\r"
  expect {
    timeout { handle_timeout; break }
    -gl "Enter the service ID*hosting1*to delete it permanently"
  }
  send "hosting1\r"
  expect {
    timeout { handle_timeout; break }
    -gl "Deleting service*hosting1*on project*delete5"
  }
  send "we curl /projects/delete5/services/hosting1\r"
  expect {
    timeout { handle_timeout; break }
    "Service delete5/hosting1 does not exist."
  }
  break
}

verify_service_exists delete5 hosting2
delete_project delete5
