#! /usr/bin/expect

# set globals here
set _default_timeout 5
set _remote wedeploy.xyz
set _root_dir functional
set _junit_features_content ""
set _junit_report_content "<?xml version='1.0' encoding='utf-8'?>"
set _junit_scenarios_content ""
set _junit_test_report "../test-results/TEST-report.xml"
set _scenarios_count 0
set _test_report "../test-results/report.txt"
set _teamuser(email) qa.team.user@wedeploy.com
set _teamuser(pw) "L6P&ZExVXydC"
set _tester(email) cli-tester@test.com
set _tester(pw) test
set _tests_errors 0
set _tests_failed 0
set _tests_failed_by_feature 0
set _tests_total 0

if { [info exists env(REMOTE)] } {
  set _remote $::env(REMOTE)
}

if { [info exists env(TEAMUSER_EMAIL)] } {
  set _teamuser(email) $::env(TEAMUSER_EMAIL)
}

if { [info exists env(TEAMUSER_PW)] } {
  set _teamuser(pw) $::env(TEAMUSER_PW)
}

if { [info exists env(TESTER_EMAIL)] } {
  set _tester(email) $::env(TESTER_EMAIL)
}

if { [info exists env(TESTER_PW)] } {
  set _tester(pw) $::env(TESTER_PW)
}

source ../procs/shared_procs.tcl
source ../procs/curl_procs.tcl

# create tester if user doesn't already exist
if { ![user_exists $_tester(email)] } {
  if { [catch { create_user $_tester(email) }] } {
    print_msg "Error creating test user! Aborting tests." red
    exit 1
  }
}

puts "TESTER_EMAIL: $_tester(email)"
puts "REMOTE: $_remote"

# initialize test report file
set report_file [open $_test_report w]
close $report_file

exec we curl enable
exec we remote set qa-remote $_remote
exec we remote default qa-remote

set test_files {}

if { $::argc > 1 } {
  foreach arg $::argv {
    if { $arg == "-tclargs" } { continue }
    lappend test_files $arg
  }
} else {
  # list of test files to run
  lappend test_files \
    login.exp \
    list.exp \
    deploy.exp \
    log.exp \
    restart.exp \
    new.exp \
    delete.exp \
    domain.exp \
    env-var.exp \
    quota.exp \
    scale.exp \
    shell.exp
}

# run tests
foreach test_file $test_files {
  if { [catch { source $test_file } errmsg] } {
    incr ::_tests_errors 1
    set message "\nUnexpected error occurred:\n"
    append message "ErrorMsg: $errmsg\n"
    append message "ErrorCode: $errorCode\n"
    append message "ErrorInfo:\n$errorInfo\n"
    puts $message
    add_to_report $message
  }
}

append _junit_report_content "<testsuites name='cli-functional-tests' tests='$_tests_total'"
append _junit_report_content " failures='$_tests_failed'>"
append _junit_report_content $_junit_features_content
append _junit_report_content "</testsuites>"

add_to_junit_report $_junit_report_content

# report test counts
set passed [expr {$_tests_total-$_tests_failed}]
add_to_report "\nTotal number of tests: $_tests_total"
add_to_report "Total passed: $passed"
add_to_report "Total failed: $_tests_failed"

print_msg "Total number of tests: $_tests_total" green
print_msg "Total passed: $passed" green

if { $_tests_failed > 0 } {
  print_msg "Total failed: $_tests_failed" red
  exit 1
} else {
  print_msg "All tests passed!" green
}
