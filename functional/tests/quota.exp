#! /usr/bin/expect

spawn $env(SHELL)

#####################################################
Feature: "Quota"
#####################################################

#####################################################
Scenario: "Cannot exceed project quota"
#####################################################

login $_tester(email) $_tester(pw)

set_user_plan basic
sleep 5

create_project quota1
create_project quota2
create_project quota3

while {1} {
  send "we new\r"
  expect {
    timeout { handle_timeout; break }
    "Do you want to*create*a new project or install a new service?"
  }
  send "1\r"
  expect {
    timeout { handle_timeout; break }
    "Choose a project ID"
  }
  send "quota4\r"
  expect {
    timeout { handle_timeout; break }
    "You've reached your plan limits"
  }
  send "we list\r"
  expect {
    timeout {}
    "quota4" { expectation_not_met "Should not have project \"quota4\""; break }
  }
  break
}

#####################################################
TearDownScenario: "Cannot exceed project quota"
#####################################################

#####################################################
Scenario: "Cannot exceed service quota"
#####################################################

create_service quota1 hosting1
create_service quota2 hosting1
create_service quota2 hosting2

while {1} {
  send "we new\r"
  expect {
    timeout { handle_timeout; break }
    "Do you want to*create*a new project or install a new service?"
  }
  send "2\r"
  expect {
    timeout { handle_timeout; break }
    "Type project ID or #"
  }
  send "2\r"
  expect {
    timeout { handle_timeout; break }
    "Select a Service Type"
  }
  send "4\r"
  expect {
    timeout { handle_timeout; break }
    "Choose a Service ID"
  }
  send "hosting3\r"
  expect {
    timeout { handle_timeout; break }
    "You've reached your plan limits"
  }
  send "we list\r"
  expect {
    timeout {}
    "hosting3" {
      expectation_not_met "Should not have service \"hosting3\""
      break
    }
  }
  break
}

#####################################################
TearDownScenario: "Cannot exceed service quota"
#####################################################

#####################################################
Scenario: "Cannot exceed custom domains quota"
#####################################################

if { $::_remote == "wedeploy.com" } {
  set service_domain wedeploy.io
} else {
  set service_domain wedeploy.sh
}

set qadomain1 qadomain1.$service_domain
set qadomain2 qadomain2.$service_domain
set qadomain3 qadomain3.$service_domain
set qadomain4 qadomain4.$service_domain

while {1} {
  send "we domain add $qadomain1 -p quota1 -s hosting1\r"
  expect {
    timeout { handle_timeout; break }
    "Custom domain \"$qadomain1\" added."
  }
  send "we domain add $qadomain2 -p quota1 -s hosting1\r"
  expect {
    timeout { handle_timeout; break }
    "Custom domain \"$qadomain2\" added."
  }
  send "we domain add $qadomain3 -p quota1 -s hosting1\r"
  expect {
    timeout { handle_timeout; break }
    "Custom domain \"$qadomain3\" added."
  }
  send "we domain add $qadomain4 -p quota1 -s hosting1\r"
  expect {
    timeout { handle_timeout; break }
    "You've reached your plan limits"
  }
  send "we domain show -p quota1 -s hosting1\r"
  expect {
    timeout {}
    $qadomain4 {
      expectation_not_met "Should not have custom domain \"$qadomain4\""
      break
    }
  }
  break
}

delete_project quota1
delete_project quota2
delete_project quota3

#####################################################
TearDownScenario: "Cannot exceed custom domains quota"
#####################################################

#####################################################
TearDownFeature: "Quota"
#####################################################