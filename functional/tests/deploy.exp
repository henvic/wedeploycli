#!/usr/bin/expect

spawn $env(SHELL)

Feature: "Deploy"

send "cd tests/fixtures/projectA\r"
expect {
  timeout {
    handle_timeout
    error "Had problem changing to project directory"
   }
  "fixtures/projectA"
}

Scenario: "Deploy to a new project" {
  send "$::bin deploy\r"
  expect {
    timeout { handle_timeout; break }
    "Type project ID"
  }

  set deploy1 [prefixed_project deploy1]
  send "$deploy1\r"
  expect {
    timeout { handle_timeout; break }
    "No project found."
  }
  expect {
    timeout { handle_timeout; break }
    "Create*project \"*$deploy1*\""
  }
  send "y\r"
  expect "Deploying services on project"
  set timeout 30
  expect {
    timeout { handle_timeout; break }
    "Deployment succeeded"
  }
  set timeout $::_default_timeout
  assert_service_exists $deploy1 ui
} { delete_project $deploy1 }

Scenario: "Deploy to an existing project" {
  set deploy2 [prefixed_project deploy2]
  create_project $deploy2

  send "$::bin deploy\r"
  expect {
    timeout { handle_timeout; break }
    "Type project ID or #"
  }
  send "$deploy2\r"
  expect {
    timeout { handle_timeout; break }
    "Deploying services to project"
  }
  set timeout 30
  expect {
    timeout {
      handle_timeout; break }
    "Deployment succeeded"
  }
  set timeout $::_default_timeout
  assert_service_exists $deploy2 ui
} { delete_project $deploy2 }

Scenario: "Deploy project with two services" {
  send "cd ../projectB\r"
  expect {
    timeout {
      handle_timeout
      error "Had problem changing to project directory"
     }
    "fixtures/projectB"
  }

  set deploy3 [prefixed_project deploy3]
  create_project $deploy3

  set timeout 30

  send "$::bin deploy -p $deploy3\r"
  expect {
    timeout { handle_timeout; break }
    "Deploying services to project"
  }
  expect {
    timeout { handle_timeout; break }
    "Deployment succeeded in"
  }
  expect {
    timeout { handle_timeout; break }
    "Upload completed in"
  }
  expect {
    timeout { handle_timeout; break }
    "Deployment succeeded"
  }
  expect {
    timeout { handle_timeout; break }
    "Deployment succeeded"
  }
  assert_service_exists $deploy3 ui1
  assert_service_exists $deploy3 ui2
} {
  set timeout $::_default_timeout
  delete_project $deploy3
}

Scenario: "Deploy project with bad LCP.json" {
  send "cd ../projectC\r"
  expect {
    timeout {
      handle_timeout
      error "Had problem changing to project directory"
     }
    "fixtures/projectC"
  }

  set deploy4 [prefixed_project deploy4]
  create_project $deploy4

  set timeout 30
  send "$::bin deploy -p $deploy4\r"
  expect {
    timeout { handle_timeout; break }
    "Deployment failed"
  }
  expect {
    timeout { handle_timeout; break }
    "Build failed*md-$deploy4"
  }
  set timeout $::_default_timeout
  expect {
    timeout { handle_timeout; break }
    "Open browser to check the logs?"
  }
  send "n\r"
  expect {
    timeout { handle_timeout; break }
    "fixtures/projectC"
  }
} { delete_project $deploy4 }

Scenario: "Deploy service to a new environment" {
  send "cd ../projectA\r"
  expect {
    timeout {
      handle_timeout
      error "Had problem changing to project directory"
     }
    "fixtures/projectA"
  }

  set deploy5 [prefixed_project deploy5]
  create_project $deploy5

  send "$::bin deploy -p $deploy5 -e dev\r"
  expect {
    timeout { handle_timeout; break }
    "No project found."
  }
  expect {
    timeout { handle_timeout; break }
    "Create*project \"*$deploy5-dev*\""
  }
  send "y\r"
  set timeout 30
  expect {
    timeout { handle_timeout; break }
    "Deployment succeeded"
  }
  set timeout $::_default_timeout
  assert_service_exists $deploy5-dev ui
} { delete_project $deploy5 }
