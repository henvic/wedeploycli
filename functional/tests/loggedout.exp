#!/usr/bin/expect

spawn $env(SHELL)

Feature: "Logged out"

Scenario: "Cannot list without logging in" {
  send "$::bin list\r"
  expect {
    timeout { handle_timeout; break }
    "You need to log in before using \"we list\"."
  }
  expect {
    timeout { handle_timeout; break }
    "Open your browser and authenticate?"
  }
  send "n\r"
  expect {
    timeout { handle_timeout; break }
    "Login canceled."
  }
}

Scenario: "Cannot deploy without logging in" {
  send "$::bin deploy\r"
  expect {
    timeout { handle_timeout; break }
    "You need to log in before using \"we deploy\"."
  }
  expect {
    timeout { handle_timeout; break }
    "Open your browser and authenticate?"
  }
  send "n\r"
  expect {
    timeout { handle_timeout; break }
    "Login canceled."
  }
}

Scenario: "Cannot view log without logging in" {
  send "$::bin log\r"
  expect {
    timeout { handle_timeout; break }
    "You need to log in before using \"we log\"."
  }
  expect {
    timeout { handle_timeout; break }
    "Open your browser and authenticate?"
  }
  send "n\r"
  expect {
    timeout { handle_timeout; break }
    "Login canceled."
  }
}

Scenario: "Cannot restart without logging in" {
  send "$::bin restart\r"
  expect {
    timeout { handle_timeout; break }
    "You need to log in before using \"we restart\"."
  }
  expect {
    timeout { handle_timeout; break }
    "Open your browser and authenticate?"
  }
  send "n\r"
  expect {
    timeout { handle_timeout; break }
    "Login canceled."
  }
}

Scenario: "Cannot `$::bin new` without logging in" {
  send "$::bin new\r"
  expect {
    timeout { handle_timeout; break }
    "You need to log in before using \"we new\"."
  }
  expect {
    timeout { handle_timeout; break }
    "Open your browser and authenticate?"
  }
  send "n\r"
  expect {
    timeout { handle_timeout; break }
    "Login canceled."
  }
}

Scenario: "Cannot delete without logging in" {
  send "$::bin delete\r"
  expect {
    timeout { handle_timeout; break }
    "You need to log in before using \"we delete\"."
  }
  expect {
    timeout { handle_timeout; break }
    "Open your browser and authenticate?"
  }
  send "n\r"
  expect {
    timeout { handle_timeout; break }
    "Login canceled."
  }
}

Scenario: "Cannot `$::bin domain` without logging in" {
  send "$::bin domain\r"
  expect {
    timeout { handle_timeout; break }
    "You need to log in before using \"we domain\"."
  }
  expect {
    timeout { handle_timeout; break }
    "Open your browser and authenticate?"
  }
  send "n\r"
  expect {
    timeout { handle_timeout; break }
    "Login canceled."
  }
}

Scenario: "Cannot `$::bin env-var` without logging in" {
  send "$::bin env-var\r"
  expect {
    timeout { handle_timeout; break }
    "You need to log in before using \"we env-var\"."
  }
  expect {
    timeout { handle_timeout; break }
    "Open your browser and authenticate?"
  }
  send "n\r"
  expect {
    timeout { handle_timeout; break }
    "Login canceled."
  }
}

Scenario: "Cannot `$::bin scale` without logging in" {
  send "$::bin scale\r"
  expect {
    timeout { handle_timeout; break }
    "You need to log in before using \"we scale\"."
  }
  expect {
    timeout { handle_timeout; break }
    "Open your browser and authenticate?"
  }
  send "n\r"
  expect {
    timeout { handle_timeout; break }
    "Login canceled."
  }
}

Scenario: "Cannot `$::bin shell` without logging in" {
  send "$::bin shell\r"
  expect {
    timeout { handle_timeout; break }
    "You need to log in before using \"we shell\"."
  }
  expect {
    timeout { handle_timeout; break }
    "Open your browser and authenticate?"
  }
  send "n\r"
  expect {
    timeout { handle_timeout; break }
    "Login canceled."
  }
}
