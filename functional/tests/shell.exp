#!/usr/bin/expect

spawn $env(SHELL)

Feature: "Shell"

Scenario: "Open a shell on a service container" {
  set shell1 [prefixed_project shell1]
  create_project $shell1
  create_service $shell1 hosting1

  sleep 5
  send "$::bin shell\r"
  expect {
    timeout { handle_timeout; break }
    "Please*select*a service from the list below"
  }
  expect {
    timeout { handle_timeout; break }
    "Type service ID or #"
  }
  send "1\r"
  set instances [get_container_ids $shell1 hosting1]
  set instance_1 [string range [lindex $instances 0] 0 11]
  expect {
    timeout { exit_shell; handle_timeout; break }
    "You are now accessing instance *$instance_1"
  }
  expect {
    timeout { exit_shell; handle_timeout; break }
    "Warning: don't use this shell to make changes on your services."
  }
  expect {
    timeout { exit_shell; handle_timeout; break }
    "/wedeploy-container"
  }
  send "ls\r"
  expect {
    timeout { exit_shell; handle_timeout; break }
    "index.html"
  }
  expect {
    timeout { exit_shell; handle_timeout; break }
    "/wedeploy-container"
  }
  send "exit\r"
  expect {
    timeout { handle_timeout; break }
    "/$::_root_dir"
  }
} { delete_project $shell1 }

Scenario: "Open a shell on a specific instance" {
  set shell2 [prefixed_project shell2]
  create_project $shell2
  create_service $shell2 hosting1

  send "$::bin scale -p $shell2 -s hosting1\r"
  expect {
  timeout { handle_timeout; break }
  "Number of instances"
  }
  send "3\r"
  expect {
  timeout { handle_timeout; break }
  -gl "Scaling service \"*hosting1*\" on project \"*$shell2*\" on * to *3* instances."
  }
  sleep 15
  send "$::bin shell -p $shell2 -s hosting1\r"
  expect {
  timeout { handle_timeout; break }
  "Please *select* an instance from the list below"
  }
  send "2\r"
  set instances [get_container_ids $shell2 hosting1]
  set instance_2 [string range [lindex $instances 1] 0 11]
  expect {
  timeout { exit_shell; handle_timeout; break }
  "You are now accessing instance *$instance_2"
  }
  expect {
  timeout { exit_shell; handle_timeout; break }
  "/wedeploy-container"
  }
  send "exit\r"
  expect {
  timeout { handle_timeout; break }
  "/$::_root_dir"
  }
} { delete_project $shell2 }

Scenario: "Open a shell using --instance flag" {
  set shell3 [prefixed_project shell3]
  create_project $shell3
  create_service $shell3 hosting1

  send "$::bin scale -p $shell3 -s hosting1\r"
  expect {
    timeout { handle_timeout; break }
    "Number of instances"
  }
  send "3\r"
  expect {
    timeout { handle_timeout; break }
    -gl "Scaling service \"*hosting1*\" on project \"*$shell3*\" on * to *3* instances."
  }
  sleep 5
  set instances [get_container_ids $shell3 hosting1]
  set instance_1 [string range [lindex $instances 0] 0 11]
  send "$::bin shell -p $shell3 -s hosting1 --instance $instance_1\r"
  expect {
    timeout { exit_shell; handle_timeout; break }
    "You are now accessing instance *$instance_1"
  }
  expect {
    timeout { exit_shell; handle_timeout; break }
    "/wedeploy-container"
  }
  send "exit\r"
  expect {
    timeout { handle_timeout; break }
    "/$::_root_dir"
  }
} { delete_project $shell3 }
