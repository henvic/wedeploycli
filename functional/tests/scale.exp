#!/usr/bin/expect

if { $_mode != "complete" } {
  print_msg_stderr "\nSkipping scale tests\n"
  return
}

spawn $env(SHELL)

Feature: "Scale"

Scenario: "Configure scale for a service" {
  set_user_plan standard

  set scale1 [prefixed_project scale1]
  create_project $scale1
  create_service $scale1 hosting1
  create_service $scale1 hosting2

  send "$::bin scale\r"
  expect {
    timeout { handle_timeout; break }
    "Please*select*a service from the list below"
  }
  expect {
    timeout { handle_timeout; break }
    "Type service ID or #"
  }
  send "hosting1\r"
  expect {
    timeout { handle_timeout; break }
    "Number of instances"
  }
  send "3\r"
  expect {
    timeout { handle_timeout; break }
    -gl "Scaling service \"*hosting1*\" on project \"*$scale1*\" on *wedeploy.* to *3* instances."
  }
  send "$::bin curl /projects/$scale1/services/hosting1\r"
  expect {
    timeout { handle_timeout; break }
    -gl "\"scale\"*:*3"
  }
  send "$::bin curl /projects/$scale1/services/hosting2\r"
  expect {
    timeout { handle_timeout; break }
    -gl "\"scale\"*:*1"
  }
} { delete_project $scale1 }

Scenario: "Cannot exceed service quota with scale" {
  set scale2 [prefixed_project scale2]
  create_project $scale2
  create_service $scale2 hosting1

  send "$::bin scale -p $scale2 -s hosting1\r"
  expect {
    timeout { handle_timeout; break }
    "Number of instances"
  }
  send "22\r"
  expect {
    timeout { handle_timeout; break }
    "You've reached your plan limits"
  }
  send "$::bin curl /projects/$scale2/services/hosting1\r"
  expect {
    timeout { handle_timeout; break }
    -gl "\"scale\"*:*1"
  }
} { delete_project $scale2 }
