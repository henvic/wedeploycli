#!/usr/bin/expect

spawn $env(SHELL)

Feature: "Log"

Scenario: "View logs by selecting project/service ID" {
  set log1 [prefixed_project log1]
  create_project $log1
  create_service $log1 ui1qa
  sleep 5
  create_service $log1 ui2qa

  send "$::bin log\r"
  expect {
    timeout { handle_timeout; break }
    "Type project/service ID or service #"
  }
  send "ui2qa\r"
  set timeout 30
  expect {
    timeout { handle_timeout; break }
    -re "ui2qa.*HOSTING will now listen on 0.0.0.0:80."
  }
  set timeout $::_default_timeout
  expect {
    timeout {}
    "ui1qa" { expectation_not_met "Should not see logs for ui1qa"; break }
  }
  control_c

  send "$::bin log\r"
  expect {
    timeout { handle_timeout; break }
    "Type project/service ID or service #"
  }
  send "1\r"
  expect {
    timeout { handle_timeout; break }
    -re "ui1qa.*HOSTING will now listen on 0.0.0.0:80."
  }
  expect {
    timeout {}
    "ui2qa" { expectation_not_met "Should not see logs for ui2qa"; break }
  }
} { control_c }

Scenario: "View logs with -p flag" {
  set log1 [prefixed_project log1]
  set log2 [prefixed_project log2]
  send "$::bin log -p $log1\r"
  expect {
    timeout { handle_timeout; break }
    -re "ui1qa.*HOSTING will now listen on 0.0.0.0:80."
  }
  expect {
    timeout { handle_timeout; break }
    -re "ui2qa.*HOSTING will now listen on 0.0.0.0:80."
  }
  control_c
  send "$::bin log -p $log2\r"
  expect {
    timeout { handle_timeout; break }
    "Project does not exist"
  }
} { control_c }

Scenario: "View logs with -p and -s flags" {
  set log1 [prefixed_project log1]
  send "$::bin log -p $log1 -s ui2qa\r"
  expect {
    timeout { handle_timeout; break }
    -re "ui2qa.*HOSTING will now listen on 0.0.0.0:80."
  }
  expect {
    timeout {}
    "ui1qa" { expectation_not_met "Should not see logs for ui1qa"; break }
  }
} { control_c }

Scenario: "View logs with --instance flag" {
  set log1 [prefixed_project log1]
  send "$::bin scale -p $log1 -s ui1qa\r"
  expect {
    timeout { handle_timeout; break }
    "Number of instances"
  }
  send "3\r"
  sleep 5
  set timeout 15
  expect {
    timeout { handle_timeout; break }
    -gl "Scaling service \"*ui1qa*\" on project \"*log1*\" on * to *3* instances."
  }
  expect {
    timeout { handle_timeout; break }
    $::_root_dir
  }
  set timeout $::_default_timeout
  set instances [get_container_ids $log1 ui1qa]
  set instance_1 [string range [lindex $instances 0] 0 11]
  set instance_2 [string range [lindex $instances 1] 0 11]
  set instance_3 [string range [lindex $instances 2] 0 11]
  send "$::bin log --instance $instance_2\r"
  expect {
    timeout { handle_timeout; break }
    "Type project/service ID or service #"
  }
  send "1\r"
  expect {
    timeout {}
    $instance_1 { expectation_not_met "Should not see logs for $instance_1"; break }
  }
  expect {
    timeout {}
    $instance_3 { expectation_not_met "Should not see logs for $instance_1"; break }
  }
  expect {
    timeout { handle_timeout; break }
    "$instance_2"
  }
} { control_c }

Scenario: "View logs with --since flag" {
  set log1 [prefixed_project log1]
  send_user "waiting 60 seconds to test the --since flag\n\n"
  sleep 60
  create_service $log1 ui3qa

  if { [info exists expect_out(buffer)] } { unset expect_out(buffer) }

  send "$::bin log --since 1min\r"
  expect {
    timeout { handle_timeout; break }
    "Type project/service ID or service #"
  }
  send "$log1\r"
  expect {
    timeout {}
    "ui1qa" { expectation_not_met "Should not see logs for ui1qa"; break }
  }
  expect {
    timeout {}
    "ui2qa" { expectation_not_met "Should not see logs for ui2qa"; break }
  }
  expect {
    timeout { handle_timeout; break }
    -re "ui3qa.*HOSTING will now listen on 0.0.0.0:80."
  }
} {
  control_c
  delete_project $log1
}
