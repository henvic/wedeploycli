#!/usr/bin/expect

spawn $env(SHELL)

Feature: "Restart"

Scenario: "Select a service to restart" {
  set restart1 [prefixed_project restart1]
  create_project $restart1
  create_service $restart1 ui1qa
  create_service $restart1 ui2qa

  send "$::bin restart\r"
  expect {
    timeout { handle_timeout; break }
    "Type service ID or #"
  }
  send "ui2qa\r"
  expect {
    timeout { handle_timeout; break }
    -gl "Restarting service*ui2qa*on project*$restart1"
  }
  send "$::bin curl \"/projects/$restart1/activities?type=SERVICE_RESTARTED\"\r"
  expect {
    timeout { handle_timeout; break }
    -gl "\"serviceId\"*:*\"ui2qa\"*,*\"projectId\"*:*\"$restart1\"*\"SERVICE_RESTARTED\""
  }
  expect /tests
  send "$::bin curl \"/projects/$restart1/activities?type=SERVICE_RESTARTED\"\r"
  expect {
    timeout {}
    -gl "\"serviceId\"*:*\"ui1qa\"*,*\"projectId\"*:*\"$restart1\"*\"SERVICE_RESTARTED\"" {
      expectation_not_met "Should not have SERVICE_RESTARTED activity for ui1qa"
      break
    }
  }
} { delete_project $restart1 }

Scenario: "Restart with -p flag" {
  set restart2 [prefixed_project restart2]
  set restart3 [prefixed_project restart3]
  create_project $restart2
  create_project $restart3
  create_service $restart2 hosting1a
  create_service $restart3 hosting1b

  send "$::bin restart -p $restart2\r"
  expect {
    timeout {}
    "hosting1b-$restart3" {
    expectation_not_met "Should not show $restart3 project"; break
    }
  }
  expect {
    timeout { handle_timeout; break }
    "hosting1a-$restart2"
  }
  expect {
    timeout { handle_timeout; break }
    "Type service ID or #"
  }
  send "1\r"
  expect {
    timeout { handle_timeout; break }
    -gl "Restarting service*hosting1a*on project*$restart2"
  }
  send "$::bin curl /projects/$restart2/activities\r"
  expect {
    timeout { handle_timeout; break }
    -gl "\"serviceId\"*:*\"hosting1a\"*,*\"projectId\"*:*\"$restart2\"*\"SERVICE_RESTARTED\""
  }
  expect /tests
  send "$::bin curl /projects/$restart3/activities\r"
  expect {
    timeout {}
   "SERVICE_RESTARTED" {
      expectation_not_met "Should not have SERVICE_RESTARTED activity for hosting1b"
      break
    }
  }
} {
  delete_project $restart2
  delete_project $restart3
}

Scenario: "Restart with -p and -s flags" {
  set restart4 [prefixed_project restart4]
  set restart5 [prefixed_project restart5]
  create_project $restart4
  create_project $restart5
  create_service $restart4 hosting1
  create_service $restart5 hosting1

  send "$::bin restart -p $restart5 -s hosting1\r"
  expect {
    timeout { handle_timeout; break }
    -gl "Restarting service*hosting1*on project*$restart5"
  }
  send "$::bin curl /projects/$restart5/activities\r"
  expect {
    timeout { handle_timeout; break }
    -gl "\"serviceId\"*:*\"hosting1\"*,*\"projectId\"*:*\"$restart5\"*\"SERVICE_RESTARTED\""
  }
  expect /tests
  send "$::bin curl /projects/$restart4/activities\r"
  expect {
    timeout {}
    "SERVICE_RESTARTED" {
      expectation_not_met "Should not have SERVICE_RESTARTED activity for $restart4"
      break
    }
  }
} {
  delete_project $restart4
  delete_project $restart5
}
