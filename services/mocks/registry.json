[{
	"category": "Developer Tools",
	"color": "ff536b",
	"description": "Provides a complete development environment for Java that can be deployed in one click. It includes most popular components for building WeDeploy applications",
	"files": [],
	"id": "cloudcode08",
	"readme": "WeDeploy Cloud Code\n=============\n\nThis service provides access to WeDeploy magic internal features, such as defining your own API, real-time datastore, deploying your Java code, and much more!\n\n0. Launch your project in a few clicks.\n0. Define your API by dropping a `api.json` file inside your service.\n0. Define API paths inside `api.json` that behaves like a RESTful datastore with real-time capabilities.\n0. Deploy Java code with access to WeDeploy internal features, such as real-time handlers.\n\nUsage\n-----\n\nCommand line instructions coming soon.\n",
	"readmeAsHtml": "<h1><a href=\"#we-cloud-code\" name=\"we-cloud-code\">WeDeploy Cloud Code<\/a><\/h1>\n<p>This service provides access to WeDeploy magic internal features, such as defining your own API, real-time datastore, deploying your Java code, and much more!<\/p>\n<ol>\n  <li>Launch your project in a few clicks.<\/li>\n  <li>Define your API by dropping a <code>api.json<\/code> file inside your service.<\/li>\n  <li>Define API paths inside <code>api.json<\/code> that behaves like a RESTful datastore with real-time capabilities.<\/li>\n  <li>Deploy Java code with access to WeDeploy internal features, such as real-time handlers.<\/li>\n<\/ol>\n<h2><a href=\"#usage\" name=\"usage\">Usage<\/a><\/h2>\n<p>Command line instructions coming soon.<\/p>",
	"type": "gradle",
	"version": "1.0.0"
}, {
	"category": "Search",
	"color": "77d55a",
	"description": "Scalable JSON database with search and realtime that makes building realtime apps dramatically easier",
	"files": ["cloudsearch.pod"],
	"id": "search04",
	"readme": "WeDeploy Cloud Data\n=============\n\nThis service provides a powerful data microservice with real-time capabilities for WeDeploy.",
	"readmeAsHtml": "<h1><a href=\"#we-cloud-data\" name=\"we-cloud-data\">WeDeploy Cloud Data<\/a><\/h1>\n<p>This service provides a powerful data microservice with real-time capabilities for WeDeploy.<\/p>",
	"type": "gradle",
	"version": "1.0.0"
}, {
	"category": "Infrastructure",
	"color": "ffb700",
	"description": "Send emails in one click by using this powerful email microservice via RESTful apis",
	"files": ["email.pod"],
	"id": "email73",
	"readme": "WeDeploy Email\n=============\n\nThis service provides a powerful email microservice for WeDeploy. It's able to queue and send emails asynchronously, via RESTful APIs.\n\n0. Launch your project in a few clicks.\n0. Queue and send emails asynchronously.\n0. Simple RESTful API.\n\nUsage\n-----\n\nThe first thing you have to do is install the service on a base path of your preference, e.g. `\/email`. After the service is installed, you can use the exposed RESTful APIs to send emails.\n\n\n### Sending Emails\n\n`POST \/email\/emails`\n\n```js\nWeDeploy.url('http:\/\/[PROJECT].liferay.io\/email\/emails')\n\t.form('from', 'from@domain.com')\n\t.form('to', 'to@domain.com')\n\t.form('message', 'Hi there!')\n\t.form('subject', 'Subject')\n\t.post()\n\t.then(function(response) {\n\t\t\/\/ The email was successfully sent.\n\t\tconsole.log('Email id:', response.body());\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n```\n\n#### Options\n\n\nOption \t\t | Type    | Description\n------------ | ------- | ------------\nbcc\t\t\t | string  | Bcc recipient email address. Multiple addresses should be defined in multiple parameters.\ncc\t\t\t | string  | Cc recipient email address. Multiple addresses should be defined in multiple parameters.\nfrom\t\t | string  | Sender email address.\nmessage\t\t | string  | HTML content of your email message. Up to 5MB.\npriority\t | number  | Used by email clients to define a message's importance. From 1 to 5 where '1' is highest and '5' is the lowest priority.\nreplyTo\t\t | string  | Append a reply-to address to your email message.\nsubject\t\t | string  | Subject of your email. Up to 1MB.\nto\t\t\t | string  | Recipient email address. Multiple addresses should be defined in multiple parameters.\n\n### Checking Email Status\n\n`GET \/email\/emails\/:id\/status`\n\nLet's say the email sent on the previous example returns the id `123`. In order to check its status you can request:\n\n```js\nWeDeploy.url('http:\/\/[PROJECT].liferay.io\/email\/emails\/123\/status')\n\t.get()\n\t.then(function(response) {\n\t\tconsole.log('Email status:', response.body());\n\t});\n```\n",
	"readmeAsHtml": "<h1><a href=\"#we-email\" name=\"we-email\">WeDeploy Email<\/a><\/h1>\n<p>This service provides a powerful email microservice for WeDeploy. It&rsquo;s able to queue and send emails asynchronously, via RESTful APIs.<\/p>\n<ol>\n  <li>Launch your project in a few clicks.<\/li>\n  <li>Queue and send emails asynchronously.<\/li>\n  <li>Simple RESTful API.<\/li>\n<\/ol>\n<h2><a href=\"#usage\" name=\"usage\">Usage<\/a><\/h2>\n<p>The first thing you have to do is install the service on a base path of your preference, e.g. <code>\/email<\/code>. After the service is installed, you can use the exposed RESTful APIs to send emails.<\/p>\n<h3><a href=\"#sending-emails\" name=\"sending-emails\">Sending Emails<\/a><\/h3>\n<p><code>POST \/email\/emails<\/code><\/p>\n<pre><code class=\"js\">WeDeploy.url(&#39;http:\/\/[PROJECT].liferay.io\/email\/emails&#39;)\n\t.form(&#39;from&#39;, &#39;from@domain.com&#39;)\n\t.form(&#39;to&#39;, &#39;to@domain.com&#39;)\n\t.form(&#39;message&#39;, &#39;Hi there!&#39;)\n\t.form(&#39;subject&#39;, &#39;Subject&#39;)\n\t.post()\n\t.then(function(response) {\n\t\t\/\/ The email was successfully sent.\n\t\tconsole.log(&#39;Email id:&#39;, response.body());\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n<\/code><\/pre>\n<h4><a href=\"#options\" name=\"options\">Options<\/a><\/h4>\n<table>\n  <thead>\n    <tr>\n      <th>Option <\/th>\n      <th>Type <\/th>\n      <th>Description<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    <tr>\n      <td>bcc <\/td>\n      <td>string <\/td>\n      <td>Bcc recipient email address. Multiple addresses should be defined in multiple parameters.<\/td>\n    <\/tr>\n    <tr>\n      <td>cc <\/td>\n      <td>string <\/td>\n      <td>Cc recipient email address. Multiple addresses should be defined in multiple parameters.<\/td>\n    <\/tr>\n    <tr>\n      <td>from <\/td>\n      <td>string <\/td>\n      <td>Sender email address.<\/td>\n    <\/tr>\n    <tr>\n      <td>message <\/td>\n      <td>string <\/td>\n      <td>HTML content of your email message. Up to 5MB.<\/td>\n    <\/tr>\n    <tr>\n      <td>priority <\/td>\n      <td>number <\/td>\n      <td>Used by email clients to define a message&rsquo;s importance. From 1 to 5 where &lsquo;1&rsquo; is highest and &lsquo;5&rsquo; is the lowest priority.<\/td>\n    <\/tr>\n    <tr>\n      <td>replyTo <\/td>\n      <td>string <\/td>\n      <td>Append a reply-to address to your email message.<\/td>\n    <\/tr>\n    <tr>\n      <td>subject <\/td>\n      <td>string <\/td>\n      <td>Subject of your email. Up to 1MB.<\/td>\n    <\/tr>\n    <tr>\n      <td>to <\/td>\n      <td>string <\/td>\n      <td>Recipient email address. Multiple addresses should be defined in multiple parameters.<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n<h3><a href=\"#checking-email-status\" name=\"checking-email-status\">Checking Email Status<\/a><\/h3>\n<p><code>GET \/email\/emails\/:id\/status<\/code><\/p>\n<p>Let&rsquo;s say the email sent on the previous example returns the id <code>123<\/code>. In order to check its status you can request:<\/p>\n<pre><code class=\"js\">WeDeploy.url(&#39;http:\/\/[PROJECT].liferay.io\/email\/emails\/123\/status&#39;)\n\t.get()\n\t.then(function(response) {\n\t\tconsole.log(&#39;Email status:&#39;, response.body());\n\t});\n<\/code><\/pre>",
	"type": "gradle",
	"version": "1.0.0"
}, {
	"category": "Infrastructure",
	"color": "e6e7e7",
	"description": "Node.js is a platform built on Chrome's JavaScript runtime for easily building fast, scalable network applications. It uses an event-driven, non-blocking I\/O model that makes it lightweight and efficient",
	"files": [],
	"id": "nodejs56",
	"readme": "Node.js\n=============\n\nNode.js is a platform built on Chrome's JavaScript runtime for easily building fast, scalable network applications. It uses an event-driven, non-blocking I\/O model that makes it lightweight and efficient.",
	"readmeAsHtml": "<h1>Node.js<\/h1>\n<p>Node.js is a platform built on Chrome&rsquo;s JavaScript runtime for easily building fast, scalable network applications. It uses an event-driven, non-blocking I\/O model that makes it lightweight and efficient.<\/p>",
	"type": null,
	"version": "5.0.0"
}, {
	"category": "Portal Server",
	"color": "e6e7e7",
	"description": "Liferay is a portal, web content management and collaboration software package. It includes social collaboration features such as a doc library, off-line document sync, internal messaging, online presence, and more",
	"files": [],
	"id": "liferay72",
	"readme": "Liferay Portal 7.0.0\n=============\n\nThis service provides a Liferay Portal that can be installed inside WeDeploy infrastructure. Liferay is a portal, web content management and collaboration software package. It includes social collaboration features such as a doc library, off-line document sync, internal messaging, online presence, and more.\n\nComing soon.",
	"readmeAsHtml": "<h1>Liferay Portal 7.0.0<\/h1>\n<p>This service provides a Liferay Portal that can be installed inside WeDeploy infrastructure. Liferay is a portal, web content management and collaboration software package. It includes social collaboration features such as a doc library, off-line document sync, internal messaging, online presence, and more.<\/p>\n<p>Coming soon.<\/p>",
	"type": null,
	"version": "7.0.0"
}, {
	"category": "Infrastructure",
	"color": "9552ef",
	"description": "Sign up, sign in and logout your users via RESTful APIs by this users management microservice",
	"files": ["users.pod"],
	"id": "users09",
	"readme": "WeDeploy Users\n=============\n\nThis service provides a powerful users microservice for WeDeploy. It's able to sign up, login, logout, and manage users, via RESTful APIs.\n\n0. Launch your project in a few clicks.\n0. Signup, login, and logout APIs.\n0. Send reset password link and reset password APIs.\n0. Configure your login and logout redirect URLs.\n0. Securely store the user's password.\n0. Simple RESTful API.\n\nUsage\n-----\n\nThe first thing you have to do is install the service on a base path of your preference, e.g. `\/users`. After the service is installed, the users service exposes RESTful APIs for you to use.\n\n\n### Create a User\n\n`POST \/users\/data`\n\n```js\nWeDeploy.url('http:\/\/[PROJECT].liferay.io\/users\/data')\n\t.form('email', 'user@domain.com')\n\t.form('password', 'password')\n\t.form('foo', 'bar')\n\t.post()\n\t.then(function(response) {\n\t\t\/\/ User stored!\n\t\tconsole.log('User id', response.body().id);\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error happened\n\t});\n```\n\n#### Options\n\n\nOption \t\t | Type              | Description\n------------ | ----------------- | ------------\nemail\t     | string (required) | The username used for user credentials.\npassword\t | string (required) | The password used for user credentials.\npermissions\t | array.<string>    | Array of strings with user permissions.\nroles    \t | array.<string>    | Array of strings with user roles.\n\n### Get All Users\n\n`GET \/users\/data`\n\n```js\nWeDeploy.url('http:\/\/[PROJECT].liferay.io\/users\/data')\n\t.get()\n\t.then(function(response) {\n\t\tconsole.log('All users', response.body());\n\t});\n```\n\n### Get a User\n\n`GET \/users\/data\/:id`\n\n```js\nWeDeploy.url('http:\/\/[PROJECT].liferay.io\/users\/data\/123')\n\t.get()\n\t.then(function(response) {\n\t\tconsole.log('User', response.body());\n\t});\n```\n\n### Delete a User\n\n`DELETE \/users\/data\/:id`\n\n```js\nWeDeploy.url('http:\/\/[PROJECT].liferay.io\/users\/data\/123')\n\t.delete()\n\t.then(function(response) {\n\t\t\/\/ The user was successfully deleted.\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n```\n\n### Send Reset Password Link to a User\n\n`POST \/users\/reset-password-link`\n\n```js\nWeDeploy.url('http:\/\/[PROJECT].liferay.io\/users\/reset-password-link')\n    .form('email', 'user@domain.com')\n\t.post()\n\t.then(function(response) {\n\t\t\/\/ The reset password link was successfully sent.\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n```\n\n#### Options\n\n\nOption \t\t | Type              | Description\n------------ | ----------------- | ------------\nemail\t     | string (required) | The username used for user credentials.\n\n### Reset a User's Password\n\n`POST \/users\/reset-password`\n\n```js\nWeDeploy.url('http:\/\/[PROJECT].liferay.io\/users\/reset-password-link')\n    .form('email', 'user@domain.com')\n    .form('password', 'newPassword')\n    .form('token', 'token')\n\t.post()\n\t.then(function(response) {\n\t\t\/\/ The password was successfully reset.\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n```\n\n#### Options\n\n\nOption \t\t | Type              | Description\n------------ | ----------------- | ------------\nemail\t     | string (required) | The username used for user credentials.\npassword\t | string (required) | The new password used for user credentials.\ntoken    \t | string (required) | The reset password token received on the email.\n\n### Add Permissions for a User\n\n`PATCH \/users\/data\/:id\/permissions`\n\n```js\nWeDeploy.url('http:\/\/[PROJECT].liferay.io\/users\/data\/123\/permissions')\n\t.patch(\"newPermission\")\n\t.then(function(response) {\n\t\t\/\/ The permission was successfully added.\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n```\n\n### Update Permissions for a User\n\n`PUT \/users\/data\/:id\/permissions`\n\n```js\nWeDeploy.url('http:\/\/[PROJECT].liferay.io\/users\/data\/123\/permissions')\n\t.put([\"permission1\", \"permission2\"])\n\t.then(function(response) {\n\t\t\/\/ The permission was successfully updated.\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n```\n\n### Add Roles for a User\n\n`PATCH \/users\/data\/:id\/roles`\n\n```js\nWeDeploy.url('http:\/\/[PROJECT].liferay.io\/users\/data\/123\/roles')\n\t.patch(\"newRole\")\n\t.then(function(response) {\n\t\t\/\/ The role was successfully added.\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n```\n\n### Update Roles for a User\n\n`PUT \/users\/data\/:id\/roles`\n\n```js\nWeDeploy.url('http:\/\/[PROJECT].liferay.io\/users\/data\/123\/roles')\n\t.put([\"role1\", \"role2\"])\n\t.then(function(response) {\n\t\t\/\/ The role was successfully updated.\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n```\n",
	"readmeAsHtml": "<h1><a href=\"#we-users\" name=\"we-users\">WeDeploy Users<\/a><\/h1>\n<p>This service provides a powerful users microservice for WeDeploy. It&rsquo;s able to sign up, login, logout, and manage users, via RESTful APIs.<\/p>\n<ol>\n  <li>Launch your project in a few clicks.<\/li>\n  <li>Signup, login, and logout APIs.<\/li>\n  <li>Send reset password link and reset password APIs.<\/li>\n  <li>Configure your login and logout redirect URLs.<\/li>\n  <li>Securely store the user&rsquo;s password.<\/li>\n  <li>Simple RESTful API.<\/li>\n<\/ol>\n<h2><a href=\"#usage\" name=\"usage\">Usage<\/a><\/h2>\n<p>The first thing you have to do is install the service on a base path of your preference, e.g. <code>\/users<\/code>. After the service is installed, the users service exposes RESTful APIs for you to use.<\/p>\n<h3><a href=\"#create-a-user\" name=\"create-a-user\">Create a User<\/a><\/h3>\n<p><code>POST \/users\/data<\/code><\/p>\n<pre><code class=\"js\">WeDeploy.url(&#39;http:\/\/[PROJECT].liferay.io\/users\/data&#39;)\n\t.form(&#39;email&#39;, &#39;user@domain.com&#39;)\n\t.form(&#39;password&#39;, &#39;password&#39;)\n\t.form(&#39;foo&#39;, &#39;bar&#39;)\n\t.post()\n\t.then(function(response) {\n\t\t\/\/ User stored!\n\t\tconsole.log(&#39;User id&#39;, response.body().id);\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error happened\n\t});\n<\/code><\/pre>\n<h4><a href=\"#options\" name=\"options\">Options<\/a><\/h4>\n<table>\n  <thead>\n    <tr>\n      <th>Option <\/th>\n      <th>Type <\/th>\n      <th>Description<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    <tr>\n      <td>email <\/td>\n      <td>string (required) <\/td>\n      <td>The username used for user credentials.<\/td>\n    <\/tr>\n    <tr>\n      <td>password <\/td>\n      <td>string (required) <\/td>\n      <td>The password used for user credentials.<\/td>\n    <\/tr>\n    <tr>\n      <td>permissions <\/td>\n      <td>array.<string> <\/td>\n      <td>Array of strings with user permissions.<\/td>\n    <\/tr>\n    <tr>\n      <td>roles <\/td>\n      <td>array.<string> <\/td>\n      <td>Array of strings with user roles.<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n<h3><a href=\"#get-all-users\" name=\"get-all-users\">Get All Users<\/a><\/h3>\n<p><code>GET \/users\/data<\/code><\/p>\n<pre><code class=\"js\">WeDeploy.url(&#39;http:\/\/[PROJECT].liferay.io\/users\/data&#39;)\n\t.get()\n\t.then(function(response) {\n\t\tconsole.log(&#39;All users&#39;, response.body());\n\t});\n<\/code><\/pre>\n<h3><a href=\"#get-a-user\" name=\"get-a-user\">Get a User<\/a><\/h3>\n<p><code>GET \/users\/data\/:id<\/code><\/p>\n<pre><code class=\"js\">WeDeploy.url(&#39;http:\/\/[PROJECT].liferay.io\/users\/data\/123&#39;)\n\t.get()\n\t.then(function(response) {\n\t\tconsole.log(&#39;User&#39;, response.body());\n\t});\n<\/code><\/pre>\n<h3><a href=\"#delete-a-user\" name=\"delete-a-user\">Delete a User<\/a><\/h3>\n<p><code>DELETE \/users\/data\/:id<\/code><\/p>\n<pre><code class=\"js\">WeDeploy.url(&#39;http:\/\/[PROJECT].liferay.io\/users\/data\/123&#39;)\n\t.delete()\n\t.then(function(response) {\n\t\t\/\/ The user was successfully deleted.\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n<\/code><\/pre>\n<h3><a href=\"#send-reset-password-link-to-a-user\" name=\"send-reset-password-link-to-a-user\">Send Reset Password Link to a User<\/a><\/h3>\n<p><code>POST \/users\/reset-password-link<\/code><\/p>\n<pre><code class=\"js\">WeDeploy.url(&#39;http:\/\/[PROJECT].liferay.io\/users\/reset-password-link&#39;)\n    .form(&#39;email&#39;, &#39;user@domain.com&#39;)\n\t.post()\n\t.then(function(response) {\n\t\t\/\/ The reset password link was successfully sent.\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n<\/code><\/pre>\n<h4><a href=\"#options\" name=\"options\">Options<\/a><\/h4>\n<table>\n  <thead>\n    <tr>\n      <th>Option <\/th>\n      <th>Type <\/th>\n      <th>Description<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    <tr>\n      <td>email <\/td>\n      <td>string (required) <\/td>\n      <td>The username used for user credentials.<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n<h3>Reset a User&rsquo;s Password<\/h3>\n<p><code>POST \/users\/reset-password<\/code><\/p>\n<pre><code class=\"js\">WeDeploy.url(&#39;http:\/\/[PROJECT].liferay.io\/users\/reset-password-link&#39;)\n    .form(&#39;email&#39;, &#39;user@domain.com&#39;)\n    .form(&#39;password&#39;, &#39;newPassword&#39;)\n    .form(&#39;token&#39;, &#39;token&#39;)\n\t.post()\n\t.then(function(response) {\n\t\t\/\/ The password was successfully reset.\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n<\/code><\/pre>\n<h4><a href=\"#options\" name=\"options\">Options<\/a><\/h4>\n<table>\n  <thead>\n    <tr>\n      <th>Option <\/th>\n      <th>Type <\/th>\n      <th>Description<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n    <tr>\n      <td>email <\/td>\n      <td>string (required) <\/td>\n      <td>The username used for user credentials.<\/td>\n    <\/tr>\n    <tr>\n      <td>password <\/td>\n      <td>string (required) <\/td>\n      <td>The new password used for user credentials.<\/td>\n    <\/tr>\n    <tr>\n      <td>token <\/td>\n      <td>string (required) <\/td>\n      <td>The reset password token received on the email.<\/td>\n    <\/tr>\n  <\/tbody>\n<\/table>\n<h3><a href=\"#add-permissions-for-a-user\" name=\"add-permissions-for-a-user\">Add Permissions for a User<\/a><\/h3>\n<p><code>PATCH \/users\/data\/:id\/permissions<\/code><\/p>\n<pre><code class=\"js\">WeDeploy.url(&#39;http:\/\/[PROJECT].liferay.io\/users\/data\/123\/permissions&#39;)\n\t.patch(&quot;newPermission&quot;)\n\t.then(function(response) {\n\t\t\/\/ The permission was successfully added.\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n<\/code><\/pre>\n<h3><a href=\"#update-permissions-for-a-user\" name=\"update-permissions-for-a-user\">Update Permissions for a User<\/a><\/h3>\n<p><code>PUT \/users\/data\/:id\/permissions<\/code><\/p>\n<pre><code class=\"js\">WeDeploy.url(&#39;http:\/\/[PROJECT].liferay.io\/users\/data\/123\/permissions&#39;)\n\t.put([&quot;permission1&quot;, &quot;permission2&quot;])\n\t.then(function(response) {\n\t\t\/\/ The permission was successfully updated.\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n<\/code><\/pre>\n<h3><a href=\"#add-roles-for-a-user\" name=\"add-roles-for-a-user\">Add Roles for a User<\/a><\/h3>\n<p><code>PATCH \/users\/data\/:id\/roles<\/code><\/p>\n<pre><code class=\"js\">WeDeploy.url(&#39;http:\/\/[PROJECT].liferay.io\/users\/data\/123\/roles&#39;)\n\t.patch(&quot;newRole&quot;)\n\t.then(function(response) {\n\t\t\/\/ The role was successfully added.\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n<\/code><\/pre>\n<h3><a href=\"#update-roles-for-a-user\" name=\"update-roles-for-a-user\">Update Roles for a User<\/a><\/h3>\n<p><code>PUT \/users\/data\/:id\/roles<\/code><\/p>\n<pre><code class=\"js\">WeDeploy.url(&#39;http:\/\/[PROJECT].liferay.io\/users\/data\/123\/roles&#39;)\n\t.put([&quot;role1&quot;, &quot;role2&quot;])\n\t.then(function(response) {\n\t\t\/\/ The role was successfully updated.\n\t})\n\t.catch(function(reason) {\n\t\t\/\/ Some error has happened\n\t});\n<\/code><\/pre>",
	"type": "gradle",
	"version": "1.0.0"
}, {
	"category": "Infrastructure",
	"color": "00a4ff",
	"description": "Easily deploy and host your app's static assets (HTML, CSS, JavaScript, etc) with our production-grade hosting service",
	"files": [],
	"id": "static05",
	"readme": "WeDeploy Static Hosting\n=============\n\nEasily deploy and host your app's static assets (HTML, CSS, JavaScript, etc) with our production-grade hosting service.\n",
	"readmeAsHtml": "<h1><a href=\"#we-static-hosting\" name=\"we-static-hosting\">WeDeploy Static Hosting<\/a><\/h1>\n<p>Easily deploy and host your app&rsquo;s static assets (HTML, CSS, JavaScript, etc) with our production-grade hosting service.<\/p>",
	"type": "plain",
	"version": "1.0.0"
}]
